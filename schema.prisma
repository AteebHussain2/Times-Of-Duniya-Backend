generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  username    String        @unique
  fullname    String
  firstName   String
  lastName    String?
  email       String        @unique
  role        Role          @default(MEMBER)
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Comment     Comment[]
  CommentLike CommentLike[]
  Like        Like[]
  posts       Post[]
  View        View[]
}

model Post {
  id            Int           @id @default(autoincrement())
  title         String
  thumbnail     String
  slug          String
  summary       String?
  content       String
  published     Boolean       @default(false)
  publishedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  authorId      String
  categoryId    Int?
  labels        String[]
  accuracy      Int?          @default(0)
  articleStatus ARTICLESTATUS @default(PENDING)
  feedback      String?
  reason        String?
  comments      Comment[]
  likes         Like[]
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  source        Source[]
  views         View[]
  PostTags      PostTags[]
}

model Source {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  Article     Article[]
  Job         Job[]
  posts       Post[]
  Topic       Topic[]
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  PostTags PostTags[]
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    Int
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int
  userId    String?
  ipAddress String?
  userAgent String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([postId, ipAddress])
}

model Job {
  id             Int           @id @default(autoincrement())
  categoryId     Int
  type           TYPE
  trigger        TRIGGER       @default(CRON)
  status         STATUS        @default(QUEUED)
  totalItems     Int           @default(0)
  completedItems Int           @default(0)
  error          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  articles       Article[]
  category       Category      @relation(fields: [categoryId], references: [id])
  topics         Topic[]
  UsageMetric    UsageMetric[]
}

model Topic {
  id         Int       @id @default(autoincrement())
  jobId      Int
  categoryId Int
  title      String
  summary    String?
  published  String?
  status     STATUS    @default(PENDING)
  createdAt  DateTime  @default(now())
  source     String[]
  articles   Article[]
  category   Category  @relation(fields: [categoryId], references: [id])
  job        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Article {
  id            Int           @id @default(autoincrement())
  topicId       Int
  jobId         Int
  categoryId    Int
  status        STATUS        @default(PENDING)
  createdAt     DateTime      @default(now())
  publishedAt   DateTime?
  accuracy      Int?          @default(0)
  articleStatus ARTICLESTATUS @default(PENDING)
  content       String
  feedback      String?
  reasoning     String?
  summary       String?
  tags          String[]
  thumbnail     String?
  title         String
  source        String[]
  publishedUrl  String?
  category      Category      @relation(fields: [categoryId], references: [id])
  job           Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  topic         Topic         @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model UsageMetric {
  id                 Int      @id @default(autoincrement())
  date               DateTime
  promptTokens       Int
  completionTokens   Int
  totalTokens        Int
  successfulRequests Int
  jobId              Int?
  createdAt          DateTime @default(now())
  trigger            TRIGGER  @default(CRON)
  userId             String?
  job                Job?     @relation(fields: [jobId], references: [id])
}

model PostTags {
  A    Int
  B    Int
  Post Post @relation(fields: [A], references: [id], onDelete: Cascade)
  Tag  Tag  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_PostTags_AB_pkey")
  @@index([B], map: "_PostTags_B_index")
  @@map("_PostTags")
}

enum Role {
  ADMIN
  EDITOR
  MODERATOR
  MEMBER
}

enum ARTICLESTATUS {
  PENDING
  APPROVED
  REJECTED
}

enum TYPE {
  TOPIC_GENERATION
  ARTICLE_GENERATION
}

enum TRIGGER {
  MANUAL
  CRON
}

enum STATUS {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  QUEUED
}
